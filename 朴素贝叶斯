import numpy as np
from sklearn.model_selection import train_test_split

def loadDataSet():
    postingList=[['my', 'dog', 'has', 'flea', 'problems', 'help', 'please'],
                 ['maybe', 'not', 'take', 'him', 'to', 'dog', 'park', 'stupid'],
                 ['my', 'dalmation', 'is', 'so', 'cute', 'I', 'love', 'him'],
                 ['stop', 'posting', 'stupid', 'worthless', 'garbage'],
                 ['mr', 'licks', 'ate', 'my', 'steak', 'how', 'to', 'stop', 'him'],
                 ['quit', 'buying', 'worthless', 'dog', 'food', 'stupid']]
    classVec = [0,1,0,1,0,1]    #1 is abusive, 0 not
    return postingList,classVec

def createVocabList(dataSet):
    vocabSet = set([])     #create empty set    set() 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。
    for document in dataSet:
        vocabSet = vocabSet | set(document)    #取并集            结果是个字典
    return list(vocabSet)

def setOfWords2Vec(vocabList, inputSet):
    returnVec=[0]*len(vocabList)
    for word in inputSet:
        if word in vocabList:
            returnVec[vocabList.index(word)] = 1           #设置长度为和字典列表一样的字典，哪个字段出现，那个字段对应的位置是1
        else:
            print("the word: %s is not in my Vocabulary!" % word)
    return returnVec

def trainNB0(trainMatrix,trainCategory):
    numTrainDocs=len(trainMatrix)
    numWords=len(trainMatrix[0])
    pAbusive=sum(trainCategory)/len(trainMatrix)            #算p(1)
    p0Num=np.ones(numWords)
    p1Num=np.ones(numWords)
    p0Denom=2
    p1Denom=2                                      ###这个是解决零概率问题
    for i in range(numTrainDocs):
        if trainCategory[i]==1:
            p1Num=p1Num+trainMatrix[i]
            p1Denom=p1Denom+sum(trainMatrix[i])
        else:
            p0Num = p0Num + trainMatrix[i]
            p0Denom = p0Denom + sum(trainMatrix[i])
    p1Vect=np.log(p1Num/p1Denom)
    p0Vect=np.log(p0Num/p0Denom)
    return p0Vect,p1Vect,pAbusive

def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):
    p1=sum(vec2Classify*p1Vec)+np.log(pClass1)
    p0=sum(vec2Classify*p0Vec)+np.log(1-pClass1)
    if p1>p0:
        return 1
    else:
        return 0

def testingNB():
    listOpost,listClasses=loadDataSet()
    myVocabList=createVocabList(listOpost)
    #setOfWords2Vec(myVocabList,listOpost[0])
    trainMat=[]
    for postinDoc in listOpost:
        trainMat.append(setOfWords2Vec(myVocabList,postinDoc))
    p0V,p1V,pAb=trainNB0(trainMat,listClasses)
    testEntry=['love','my','dalmation']
    thisDoc=setOfWords2Vec(myVocabList,testEntry)
    print(testEntry, 'classified as: ', classifyNB(thisDoc, p0V, p1V, pAb))
    testEntry = ['stupid', 'garbage']
    thisDoc=setOfWords2Vec(myVocabList,testEntry)
    print(testEntry, 'classified as: ', classifyNB(thisDoc, p0V, p1V, pAb))

def bagOfWords2VecMN(vocabList, inputSet):
    returnVce=[0]*len(vocabList)
    for word in inputSet:
        if word in vocabList:
            returnVce[vocabList.index(word)] +=1
    return returnVce

#案例1
def testParse(bigString):
    import re
    listOfTokens=re.split(r'\W',bigString)
    return [tok.lower() for tok in listOfTokens if len(tok)> 2]

def spamTest():
    docList = []
    classList = []
    fullText = []
    for i in range(1,26):
        wordlist=testParse(open(r'D:\资源\python入门\计划单\机器学习\machinelearninginaction\Ch04\email\spam\%d.txt' % i,encoding='UTF-8').read())
        docList.append(wordlist)
        fullText.extend(wordlist)
        classList.append(1)
        wordlist=testParse(open(r'D:\资源\python入门\计划单\机器学习\machinelearninginaction\Ch04\email\ham\%d.txt' % i,encoding='UTF-8').read())
        docList.append(wordlist)
        fullText.extend(wordlist)
        classList.append(0)
    vocabList=createVocabList(docList)
    x_train, x_test, y_train, y_test = train_test_split(docList,classList,test_size=0.2)
    trainMat = []
    for postinDoc in x_train:
        trainMat.append(setOfWords2Vec(vocabList, postinDoc))
    p0V, p1V, pSpam = trainNB0(trainMat,y_train)
    errorCount=0
    for i in range(len(x_test)):
        docList=x_test[i]
        wordVctor=setOfWords2Vec(vocabList,docList)
        if classifyNB(wordVctor,p0V,p1V,pSpam) != y_test[i]:
            errorCount+=1
    print('错误率是',errorCount/len(x_test))
