import numpy as np
import operator
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from os import listdir

def createDataSet():
    group = np.array([[1.0,1.1],[1.0,1.0],[0,0],[0,0.1]])
    labels = ['A','A','B','B']
    return group, labels

def classify0(inX,dataSet,labels,k):
    dataSetSize=dataSet.shape[0]
    diffMat=np.tile(inX,(dataSetSize,1))-dataSet
    sqDiffMat=diffMat**2
    sqDistance=sqDiffMat.sum(axis=1)
    distance=sqDistance**0.5
    sortedDistIndicies=distance.argsort()                                #从小到大的索引值
    classCount={}
    for i in range(k):
        voteIlabel = labels[sortedDistIndicies[i]]
        classCount[voteIlabel] = classCount.get(voteIlabel, 0) + 1       #字典。get是寻找votelabel这个键对应的值没有就赋值为0，有就是出现的次数
    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)
    return sortedClassCount[0][0]

group,labels=createDataSet()
classify0([0,0],group,labels,3)




#案例一

def file2matrix(filename):
    fr = open(filename)
    arrayOLines=fr.readlines()
    numberOfLines = len(arrayOLines)         #get the number of lines in the file
    returnMat = np.zeros((numberOfLines,3))        #prepare matrix to return
    classLabelVector = []                       #prepare labels return
    index = 0
    for line in arrayOLines:
        line = line.strip()             #删除空格和\n
        listFromLine = line.split('\t')
        returnMat[index,:] = listFromLine[0:3]
        classLabelVector.append(int(listFromLine[-1]))
        index += 1
    return returnMat,classLabelVector

datingDataMat,datingLables=file2matrix(r'D:\资源\python入门\计划单\机器学习\machinelearninginaction\Ch02\datingTestSet2.txt')
fig=plt.figure()
ax=fig.add_subplot(221)
ax.scatter(datingDataMat[:,1],datingDataMat[:,0],10*np.array(datingLables),10*np.array(datingLables))
bx=fig.add_subplot(222)
bx.scatter(datingDataMat[:,1],datingDataMat[:,2],10*np.array(datingLables),10*np.array(datingLables))
cx=fig.add_subplot(223)
cx.scatter(datingDataMat[:,0],datingDataMat[:,2],10*np.array(datingLables),10*np.array(datingLables))

def autoNorm(dataSet):
    minVals = dataSet.min(0)               #参数改成1是行最小
    maxVals = dataSet.max(0)
    ranges = maxVals - minVals
    m = dataSet.shape[0]
    normDataSet = dataSet - np.tile(minVals, (m,1))
    normDataSet = normDataSet/np.tile(ranges, (m,1))   #element wise divide
    return normDataSet, ranges, minVals
normDataSet, ranges, minVals=autoNorm(datingDataMat)

def datingClassTest():
    datingDataMat,datingLabels = file2matrix(r'D:\资源\python入门\计划单\机器学习\machinelearninginaction\Ch02\datingTestSet2.txt')       #load data setfrom file
    normMat, ranges, minVals = autoNorm(datingDataMat)
    x_train, x_test, y_train, y_test = train_test_split(normMat,datingLables, test_size=0.1)
    errorCount = 0
    for i in range(x_test.shape[0]):
        classifierResult = classify0(x_test[i,:],x_train,y_train,3)
        print ("the classifier came back with: %d, the real answer is: %d" %(classifierResult, y_test[i]))
        if (classifierResult != y_test[i]):
            errorCount += 1
    print ("the total error rate is: %f" % (errorCount/x_train.shape[0]))
    print (errorCount)


#案例2
def img2vector(filename):
    returnVect = np.zeros((1,1024))
    fr = open(filename)
    for i in range(32):
        lineStr = fr.readline()                     #每次读一行
        for j in range(32):
            returnVect[0,32*i+j] = int(lineStr[j])
    return returnVect
returnVect=img2vector(r'D:\资源\python入门\计划单\机器学习\machinelearninginaction\Ch02\testDigits\0_13.txt')


def handwritingClassTest():
    hwLabels = []
    trainingFileList = listdir(r'D:\资源\python入门\计划单\机器学习\machinelearninginaction\Ch02\trainingDigits')  # load the training set
    m = len(trainingFileList)
    trainingMat = np.zeros((m, 1024))
    for i in range(m):
        fileNameStr = trainingFileList[i]
        fileStr = fileNameStr.split('.')[0]  # take off .txt
        classNumStr = int(fileStr.split('_')[0])
        hwLabels.append(classNumStr)
        trainingMat[i, :] = img2vector(r'D:\资源\python入门\计划单\机器学习\machinelearninginaction\Ch02\trainingDigits/%s' % fileNameStr)
    testFileList = listdir(r'D:\资源\python入门\计划单\机器学习\machinelearninginaction\Ch02\testDigits')  # iterate through the test set
    errorCount = 0.0
    mTest = len(testFileList)
    for i in range(mTest):
        fileNameStr = testFileList[i]
        fileStr = fileNameStr.split('.')[0]  # take off .txt
        classNumStr = int(fileStr.split('_')[0])
        vectorUnderTest = img2vector(r'D:\资源\python入门\计划单\机器学习\machinelearninginaction\Ch02\testDigits/%s' % fileNameStr)
        classifierResult = classify0(vectorUnderTest, trainingMat, hwLabels, 3)
        print("the classifier came back with: %d, the real answer is: %d" % (classifierResult, classNumStr))
        if (classifierResult != classNumStr):
            errorCount += 1.0
    print("\nthe total number of errors is: %d" % errorCount)
    print("\nthe total error rate is: %f" % (errorCount / float(mTest)))
